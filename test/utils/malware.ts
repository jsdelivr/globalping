import {readFile} from 'node:fs/promises';
import path from 'node:path';
import nock from 'nock';

import {
	sourceList as ipSourceList,
	populateMemList as populateMemIpList,
	updateList as updateListIp,
} from '../../src/lib/malware/ip.js';

import {
	sourceList as domainSourceList,
	populateMemList as populateMemDomainList,
	updateList as updateListDomain,
} from '../../src/lib/malware/domain.js';

const mockDataPath = path.join(path.resolve(), 'test/mocks/malware');

const ipMockResult = await readFile(path.join(mockDataPath, 'nock-ip.txt'), 'utf8');
const domainMockResult = await readFile(path.join(mockDataPath, 'nock-domain.txt'), 'utf8');

export const populateIpList = async (): Promise<void> => {
	for (const source of ipSourceList) {
		const url = new URL(source);

		nock(url.origin)
			.get(url.pathname)
			.reply(200, ipMockResult);
	}

	await updateListIp();
	await populateMemIpList();
};

export const populateDomainList = async (): Promise<void> => {
	for (const source of domainSourceList) {
		const url = new URL(source);

		nock(url.origin)
			.get(url.pathname)
			.reply(200, domainMockResult);
	}

	await updateListDomain();
	await populateMemDomainList();
};
