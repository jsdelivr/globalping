import {writeFile, readFile} from 'node:fs/promises';
import {readFileSync} from 'node:fs';
import path from 'node:path';
import got from 'got';
import validator from 'validator';

export const sourceList = [
	'https://osint.digitalside.it/Threat-Intel/lists/latestips.txt',
	'https://raw.githubusercontent.com/firehol/blocklist-ipsets/master/firehol_level2.netset',
	'https://raw.githubusercontent.com/stamparm/ipsum/master/levels/2.txt',
];

export const ipListPath = path.join(path.resolve(), 'IP_BLACKLIST.json');

const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> =>
	input.status === 'fulfilled';

export const query = async (url: string): Promise<string[]> => {
	const {body} = await got(url, {
		timeout: {request: 5000},
	});

	const result = body.split(/r?\n/).filter(l => validator.isIP(l));

	return result;
};

export const updateList = async (): Promise<void> => {
	const result = await Promise.allSettled(sourceList.map(async source => query(source)));
	const ipList = [...new Set(result.flatMap(r => isFulfilled(r) ? r.value : []))];

	await writeFile(ipListPath, JSON.stringify(ipList), {encoding: 'utf8'});
};

export const validate = async (target: string): Promise<boolean> => {
	const data = await readFile(ipListPath, 'utf8');
	const ipList = JSON.parse(data) as string[];

	return !ipList.includes(target);
};

export const validateSync = (target: string): boolean => {
	const data = readFileSync(ipListPath, 'utf8');
	const ipList = JSON.parse(data) as string[];

	return !ipList.includes(target);
};

export const joiValidate = (value: string): string | Error => {
	const isValid = validateSync(value);

	if (!isValid) {
		throw new Error('ip.blacklisted');
	}

	return String(value);
};
