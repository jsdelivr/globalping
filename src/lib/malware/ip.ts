import { writeFile, readFile } from 'node:fs/promises';
import path from 'node:path';
import type { CustomHelpers, ErrorReport } from 'joi';
import got from 'got';
import validator from 'validator';
import ipaddr from 'ipaddr.js';

export const sourceList = [
	'https://osint.digitalside.it/Threat-Intel/lists/latestips.txt',
	'https://raw.githubusercontent.com/firehol/blocklist-ipsets/master/firehol_level2.netset',
	'https://raw.githubusercontent.com/stamparm/ipsum/master/levels/2.txt',
	'https://www.spamhaus.org/drop/dropv6.txt',
	'https://lists.blocklist.de/lists/all.txt',
	'https://www.team-cymru.org/Services/Bogons/fullbogons-ipv6.txt',
];

export const ipListPath = path.join(path.resolve(), 'data/IP_BLACKLIST.json');

let ipListArray = new Set<string>();

const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> => input.status === 'fulfilled';

export const query = async (url: string): Promise<string[]> => {
	const { body } = await got(url, {
		timeout: { request: 5000 },
	});

	const result = body.split(/\r?\n/).map(l => l.split(' ')[0] ?? '').filter(l => validator.isIP(l.split('/')[0] ?? ''));

	return result;
};

export const populateMemList = async (): Promise<void> => {
	const data = await readFile(ipListPath, 'utf8');
	ipListArray = new Set(JSON.parse(data) as string[]);
};

export const updateList = async (): Promise<void> => {
	const result = await Promise.allSettled(sourceList.map(source => query(source)));
	const ipList = [ ...new Set(result.flatMap(r => isFulfilled(r) ? r.value : [])) ];

	await writeFile(ipListPath, JSON.stringify(ipList), { encoding: 'utf8' });
};

function isContainedWithinSubnet (target: string, ipListArray: Set<string>): boolean {
	if (!validator.isIP(target)) {
		return false;
	}

	const addr = ipaddr.parse(target);

	for (const ip of ipListArray) {
		if (ip.includes('/') && addr.kind() === ipaddr.parse(ip.split('/')[0] ?? '').kind()) {
			if (addr.match(ipaddr.parseCIDR(ip))) {
				return true;
			}
		}
	}

	return false;
}

export const validate = (target: string): boolean => !ipListArray.has(target) && !isContainedWithinSubnet(target, ipListArray);

export const joiValidate = (value: string, helpers?: CustomHelpers): string | ErrorReport | Error => {
	const isValid = validate(value);

	if (!isValid) {
		if (helpers) {
			return helpers.error('ip.blacklisted');
		}

		throw new Error('ip.blacklisted');
	}

	return String(value);
};
