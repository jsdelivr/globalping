import type {CustomHelpers, ErrorReport} from 'joi';
import {
	updateList as updateIpList,
	validate as validateIp,
	validateSync as validateIpSync,
} from './ip.js';

import {
	updateList as updateDomainList,
	validate as validateDomain,
	validateSync as validateDomainSync,
} from './domain.js';

export const updateList = async (): Promise<void> => {
	await updateIpList();
	await updateDomainList();
};

export const validate = async (target: string): Promise<boolean> => {
	const ipCheck = await validateIp(target);
	const domainCheck = await validateDomain(target);

	return ipCheck && domainCheck;
};

export const validateSync = (target: string): boolean => {
	const ipCheck = validateIpSync(target);
	const domainCheck = validateDomainSync(target);

	return ipCheck && domainCheck;
};

export const joiValidate = (value: string, helpers?: CustomHelpers): string | ErrorReport | Error => {
	const isValid = validateSync(value);

	if (!isValid) {
		if (helpers) {
			return helpers.error('any.blacklisted');
		}

		throw new Error('any.blacklisted');
	}

	return String(value);
};

export const joiErrorMessage = (field = 'address'): string => `Provided ${field} is blacklisted.`;

export const joiSchemaErrorMessage = (field?: string): Record<string, string> => {
	const message = joiErrorMessage(field);

	/* eslint-disable @typescript-eslint/naming-convention */
	return {
		'ip.blacklisted': message,
		'domain.blacklisted': message,
		'any.blacklisted': message,
	};
	/* eslint-enable @typescript-eslint/naming-convention */
};
