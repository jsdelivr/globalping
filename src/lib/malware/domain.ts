import {writeFile, readFile} from 'node:fs/promises';
import path from 'node:path';
import type {CustomHelpers, ErrorReport} from 'joi';
import got from 'got';
import validator from 'validator';

export const sourceList = [
	'https://phishing.army/download/phishing_army_blocklist.txt',
	'https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt',
	'https://urlhaus.abuse.ch/downloads/hostfile/',
];

export const domainListPath = path.join(path.resolve(), 'DOMAIN_BLACKLIST.json');

let domainListArray: string[] = [];

const isFulfilled = <T>(input: PromiseSettledResult<T>): input is PromiseFulfilledResult<T> =>
	input.status === 'fulfilled';

export const query = async (url: string): Promise<string[]> => {
	const {body} = await got(url, {
		timeout: {request: 5000},
	});

	const result = body.split(/r?\n?\s+/).filter(l => validator.isFQDN(l));

	return result;
};

export const updateList = async (): Promise<void> => {
	const result = await Promise.allSettled(sourceList.map(async source => query(source)));
	const list = [...new Set(result.flatMap(r => isFulfilled(r) ? r.value : []))].map(d => d.toLowerCase());

	await writeFile(domainListPath, JSON.stringify(list), {encoding: 'utf8'});
};

export const populateMemList = async (): Promise<void> => {
	const data = await readFile(domainListPath, 'utf8');
	domainListArray = JSON.parse(data) as string[];
};

export const validate = (target: string): boolean => !domainListArray.includes(target.toLowerCase());

export const joiValidate = (value: string, helpers?: CustomHelpers): string | ErrorReport | Error => {
	const isValid = validate(value);

	if (!isValid) {
		if (helpers) {
			return helpers.error('domain.blacklisted');
		}

		throw new Error('domain.blacklisted');
	}

	return String(value);
};

